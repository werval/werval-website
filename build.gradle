
description = "Werval Website"

apply plugin: 'java'

repositories {
    maven { url wervalLocalRepository }
    maven { url "https://repo.codeartisans.org/werval" }
    jcenter()
}

def versions_array = versions ? new groovy.json.JsonSlurper().parseText(versions) as List<String> : [] as List<String>


//
//  ____                            _       _   _
// |    \ ___ ___ _ _ _____ ___ ___| |_ ___| |_|_|___ ___
// |  |  | . |  _| | |     | -_|   |  _| .'|  _| | . |   |
// |____/|___|___|___|_|_|_|___|_|_|_| |__,|_| |_|___|_|_|
//

buildscript {
    dependencies {
        classpath 'org.jsoup:jsoup:1.8.1'
    }
}

def versionsSwitcher( title, current, versions_array ) {
    def versionsSwitcher = """
    <ul class=\"nav navbar-nav navbar-right\">
        <li class=\"dropdown\">
          <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">$title<span class=\"caret\"></span></a>
          <ul class=\"dropdown-menu\" role=\"menu\">
            <li><a href=\"/doc/current/index.html\">Current Version ($current)</a></li>
"""
    versions_array.each { v ->
        versionsSwitcher += """
            <li><a href=\"/doc/$v/index.html\">$v</a></li>
"""
    }
    versionsSwitcher += """
            <li class=\"divider\"></li>
            <li><a href=\"/doc/develop/index.html\">Development Version</a></li>
            <li class=\"divider\"></li>
            <li><a href=\"/\">Werval Home</a></li>
          </ul>
        </li>            
    </ul>
"""
    return versionsSwitcher
}

// Develop
configurations { doc_develop_new { transitive = false } }
dependencies { doc_develop_new "io.werval:io.werval.dist:0:doc@zip" }
task extractDocDevelopNew(type: Copy) {
    inputs.file configurations.doc_develop_new
    from zipTree( configurations.doc_develop_new.fileCollection{ it.name == 'io.werval.dist' }.singleFile )
    into file('build/tmp/werval-doc/develop')
    includeEmptyDirs = false
    doLast {
        def htmlSwitcher = versionsSwitcher( "Development Version", current, versions_array )
        fileTree('build/tmp/werval-doc/develop') { include '**/*.html'; exclude '**/api/**' }.visit { htmlFile ->
            if( !htmlFile.file.isDirectory() ) {
                def doc = org.jsoup.Jsoup.parse( htmlFile.file, 'UTF-8' )
                doc.select( 'div.navbar-collapse' ).first().append( htmlSwitcher )
                htmlFile.file.text = doc.html()
            }
        }
    }
}
// Current
configurations { doc_current_new { transitive = false } }
dependencies { doc_current_new "io.werval:io.werval.dist:$current:doc@zip" }
task extractDocCurrentNew(type: Copy) {
    inputs.file configurations.doc_current_new
    from zipTree( configurations.doc_current_new.fileCollection{ it.name == 'io.werval.dist' }.singleFile )
    into file('build/tmp/werval-doc/current')
    includeEmptyDirs = false
    doLast {
        def htmlSwitcher = versionsSwitcher( "Current Version ($current)", current, versions_array )
        fileTree('build/tmp/werval-doc/current') { include '**/*.html'; exclude '**/api/**' }.visit { htmlFile ->
            if( !htmlFile.file.isDirectory() ) {
                def doc = org.jsoup.Jsoup.parse( htmlFile.file, 'UTF-8' )
                doc.select( 'div.navbar-collapse' ).first().append( htmlSwitcher )
                htmlFile.file.text = doc.html()
            }
        }
    }
}
// Previous releases
configurations { doc_versions_new { transitive = false } }
dependencies { versions_array.each { v -> doc_versions_new "io.werval:io.werval.dist:$v:doc@zip" } }
task extractDocVersionsNew {
    dependsOn configurations.doc_versions_new
    versions_array.each { v -> outputs.dir "build/tmp/werval-doc/$v" }
    doLast {
        versions_array.each { v ->
            copy {
                from zipTree( configurations.doc_versions_new.fileCollection{ it.name == 'io.werval.dist' && it.version == v }.singleFile )
                into file( "build/tmp/werval-doc/$v" )
                includeEmptyDirs = false
            }
            def htmlSwitcher = versionsSwitcher( v, current, versions_array )
            fileTree("build/tmp/werval-doc/$v") { include '**/*.html'; exclude '**/api/**' }.visit { htmlFile ->
                if( !htmlFile.file.isDirectory() ) {
                    def doc = org.jsoup.Jsoup.parse( htmlFile.file, 'UTF-8' )
                    doc.select( 'div.navbar-collapse' ).first().append( htmlSwitcher )
                    htmlFile.file.text = doc.html()
                }
            }
        }
    }
}
// Versions JSON index
task generateVersionsIndexJSON {
    inputs.file configurations.doc_versions_new
    outputs.file "build/tmp/werval-doc/versions.json"
    doLast {
        new File("build/tmp/werval-doc").mkdirs()
        def file = new File("build/tmp/werval-doc/versions.json")
        def all_versions = versions_array.collect()
        all_versions.add( 0, current )
        all_versions.add( 0, "develop" )
        file.text = new groovy.json.JsonBuilder(all_versions).toString()
    }
    // TODO Append javascript code for the version switcher to io.werval.doc.js in each version!
}
// JBake
buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/melix/jbake-gradle-plugin' }
    }
    dependencies {
        classpath 'me.champeau.gradle:jbake-gradle-plugin:0.1'
        classpath 'org.asciidoctor:asciidoctor-java-integration:0.1.4'
        classpath 'org.freemarker:freemarker:2.3.19'
    }
}
task prepareJBakeInput {
    dependsOn extractDocDevelopNew, extractDocCurrentNew, extractDocVersionsNew, generateVersionsIndexJSON
    inputs.dir file( 'src/jbake' )
    inputs.dir file( 'build/tmp/werval-doc' )
    outputs.dir file( 'build/tmp/jbake' )
    doLast {
        copy { from file( 'src/jbake' ); into file( 'build/tmp/jbake' ) }
        copy { from file( 'build/tmp/werval-doc' ); into file( 'build/tmp/jbake/assets/doc' ) }
    }
}
apply plugin: 'jbake'
jbake {
    dependsOn prepareJBakeInput
    input file( 'build/tmp/jbake' )
    configuration = [
        'werval_current_version': current,
        'werval_previous_versions': versions_array
    ]
    doLast {
        // Add Google Analytics async script to all HTML pages
        def analyticsScript = """
    <!-- Async Analytics -->
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-55982374-1', 'auto');
      ga('send', 'pageview');
    </script>
"""
        fileTree('build/jbake') { include '**/*.html' }.visit { htmlFile ->
            if( !htmlFile.file.isDirectory() ) {
                def doc = org.jsoup.Jsoup.parse( htmlFile.file, 'UTF-8' )
                doc.head().append( analyticsScript )
                htmlFile.file.text = doc.html()
            }
        }
    }
}


//
//  _____ _ _ _ _     _
// |     |_| | | |___| |_
// |  |  | | | | | -_| . |
// |__  _|_|_____|___|___|
//    |__|
//

task generateStaticWebsiteResources {
    dependsOn jbake
    inputs.dir jbake.output
    outputs.dir file('build/generated-src/website')
    doLast { copy { from jbake.output; into file('build/generated-src/website/resources/website') } }
}
processResources.dependsOn generateStaticWebsiteResources
sourceSets.main.resources.srcDirs += file('build/generated-src/website/resources')

buildscript {
    repositories {
        maven { url wervalLocalRepository }
        maven { url "https://repo.codeartisans.org/werval" }
        jcenter()
    }
    dependencies { classpath "io.werval:io.werval.gradle:$current" }
}

apply plugin:'io.werval.application'
devshell.extraWatch += file( 'src/jbake' )

dependencies {
    compile "io.werval:io.werval.api:$current"
    runtime "io.werval:io.werval.server.bootstrap:$current"
    runtime 'ch.qos.logback:logback-classic:1.1.2'
    testCompile "io.werval:io.werval.test:$current"
}


//
//  _____         _           _
// |  _  |___ ___| |_ ___ ___|_|___ ___
// |   __| .'|  _| '_| .'| . | |   | . |
// |__|  |__,|___|_,_|__,|_  |_|_|_|_  |
//                       |___|     |___|
//

apply plugin:'application'
applicationName = name
mainClassName = 'io.werval.server.bootstrap.Main'


//
//  ____          _                       _
// |    \ ___ ___| |___ _ _ _____ ___ ___| |_
// |  |  | -_| . | | . | | |     | -_|   |  _|
// |____/|___|  _|_|___|_  |_|_|_|___|_|_|_|
//           |_|       |___|
//

buildscript {
    dependencies { classpath "org.ajoberstar:gradle-git:0.13.0-milestone.1" }
}

task deployWebsite( type: Exec, dependsOn: installApp ) {
    // Using Heroku
    doFirst { copy { from 'src/heroku'; into 'build/install/werval-website' } }
    commandLine 'heroku', 'push', 'build/install/werval-website', '--app', 'werval-website'
}

task deployStaticWebsite( type: Exec, dependsOn: jbake ) {
    inputs.dir jbake.output
    commandLine 'rsync', '-Pazhv', '-e', 'ssh', jbake.output.absolutePath + '/', 'paul@codeartisans.org:/home/www/qiweb/www'
}

apply plugin: 'org.ajoberstar.github-pages'
// Task is publishGhPages
githubPages {
    commitMessage = "Update werval.io"
    repoUri = 'git@github.com:werval/werval.github.io.git'
    targetBranch = "master"
    pages {
        from jbake.outputs.files
    }
}
